class Solution {
    static class Node{
        int data;
        Node next;
        Node(int data){
            this.data = data;
            this.next = null;
        }
    }
    static class Stack{
        Node head = null;
        public boolean isEmpty(){
            return head==null;
        }
        public void add(int data){
            Node newNode = new Node(data);
            if(isEmpty()){
                head = newNode;
                return;
            }
            newNode.next = head;
            head = newNode;
        }
        public void remove(){
            if(isEmpty()){
                return;
            }
            head = head.next;
        }
        public int peek(){
            if(isEmpty()){
                return 0;
            }
            return head.data;
        }
        public void clear(){
            head = null;
        }
    }
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int right[] = new int[n];
        int left[] = new int[n];
        Stack s = new Stack();
        for(int i=0;i<n;i++){
            while(!s.isEmpty() && heights[s.peek()]>=heights[i]){
                s.remove();
            }
            if(s.isEmpty()){
                left[i] = -1;
            }else{
                left[i] = s.peek();
            }
            s.add(i);
        }
        s.clear();
        for(int i=n-1;i>=0;i--){
            while(!s.isEmpty() && heights[s.peek()]>=heights[i]){
                s.remove();
            }
            if(s.isEmpty()){
                right[i] = n;
            }else{
                right[i] = s.peek();
            }
            s.add(i);
        }
        int maxArea = 0;
        for(int i=0;i<n;i++){
            int w = right[i]-left[i]-1;
            int area = heights[i] * w;
            maxArea = Math.max(area, maxArea);
        }
        return maxArea;
    }
}
