// RECURSION + MEMOIZARION
class Solution {
    static int dp[][];
    public boolean wM(String s1, String s2, int i, int j){
        if(i<0 && j<0){
            return true;
        }
        if(i<0 && j>=0){
            return false;
        }
        if(j<0 && i>=0){
            for(int ii=0;ii<=i;ii++){
                if(s2.charAt(ii)!='*'){
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j]!=-1){
            return (dp[i][j] == 1);
        }
        if(s1.charAt(j) == s2.charAt(i) || s2.charAt(i)=='?'){
            dp[i][j] = (wM(s1, s2, i-1, j-1)) ? 1 : 0;
            return (dp[i][j] == 1);
        }
        if(s2.charAt(i)=='*'){
            dp[i][j] = (wM(s1, s2, i-1, j) || wM(s1, s2, i, j-1)) ? 1 : 0;
            return (dp[i][j] == 1);
        }
        dp[i][j] = 0;
        return false;
    }
    public boolean isMatch(String s, String p) {
        int n = s.length();
        int m = p.length();
        dp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = -1;
            }
        }
        return wM(s, p, m-1, n-1);
    }
}
// TABULATION
class Solution {
    public boolean isMatch(String s, String p) {
        int n = p.length();
        int m = s.length();
        boolean[][] dp = new boolean[n+1][m+1];
        dp[0][0] = true;
        for(int j=1;j<=m;j++){
            dp[0][j] = false;
        }
        for(int i=1;i<=n;i++){
            boolean flag = true;
            for(int ii=1;ii<=i;ii++){
                if(p.charAt(ii-1)!='*'){
                    flag = false;
                    break;
                }
            }
            dp[i][0] = flag;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(p.charAt(i-1)==s.charAt(j-1) || p.charAt(i-1)=='?'){
                    dp[i][j] = dp[i-1][j-1];
                } else if(p.charAt(i-1)=='*'){
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                } else {
                    dp[i][j] = false;
                }
            }
        }
        return dp[n][m];
    }
}
