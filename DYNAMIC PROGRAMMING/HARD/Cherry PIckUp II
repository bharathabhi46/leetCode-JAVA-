// RECURSION + MEMOIZATION
class Solution {
    static int dp[][][];

    // static int maxi = Integer.MIN_VALUE;
    public int cP(int a[][], int i, int j1, int j2, int m, int n) {
        if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) {
            return Integer.MIN_VALUE;
        }
        if (dp[i][j1][j2] != -1) {
            return dp[i][j1][j2];
        }
        if (i == n - 1) {
            if (j1 == j2) {
                return a[i][j1];
            } else {
                return a[i][j1] + a[i][j2];
            }
        }
        int maxi = Integer.MIN_VALUE;
        for (int dj1 = -1; dj1 <= 1; dj1++) {
            for (int dj2 = -1; dj2 <= 1; dj2++) {
                if (j1 == j2) {
                    maxi = Math.max(maxi, a[i][j1] + cP(a, i + 1, j1 + dj1, j2 + dj2, m, n));
                } else {
                    maxi = Math.max(maxi, a[i][j1] + a[i][j2] + cP(a, i + 1, j1 + dj1, j2 + dj2, m, n));
                }
            }
        }
        dp[i][j1][j2] = maxi;
        return dp[i][j1][j2];
    }

    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        dp = new int[n][m][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                for (int k = 0; k < m; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return cP(grid, 0, 0, m - 1, m, n);
    }
}
// TABULATION 
class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        int[][][] dp = new int[n][m][m];
        for (int j1 = 0; j1 < m; j1++) {
            for (int j2 = 0; j2 < m; j2++) {
                dp[n - 1][j1][j2] = (j1 == j2) ? grid[n - 1][j1] : grid[n - 1][j1] + grid[n - 1][j2];
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < m; j1++) {
                for (int j2 = 0; j2 < m; j2++) {
                    int maxi = Integer.MIN_VALUE;
                    for (int dj1 = -1; dj1 <= 1; dj1++) {
                        for (int dj2 = -1; dj2 <= 1; dj2++) {
                            int nj1 = j1 + dj1, nj2 = j2 + dj2;
                            if (nj1 >= 0 && nj1 < m && nj2 >= 0 && nj2 < m) {
                                int val = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                                val += dp[i + 1][nj1][nj2];
                                maxi = Math.max(maxi, val);
                            }
                        }
                    }
                    dp[i][j1][j2] = maxi;
                }
            }
        }
        return dp[0][0][m - 1];
    }
}
// SPACE OPTMIZATION
class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        int[][] front = new int[m][m], curr = new int[m][m];
        for (int j1 = 0; j1 < m; j1++) {
            for (int j2 = 0; j2 < m; j2++) {
                front[j1][j2] = (j1 == j2) ? grid[n - 1][j1] : grid[n - 1][j1] + grid[n - 1][j2];
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < m; j1++) {
                for (int j2 = 0; j2 < m; j2++) {
                    int maxi = Integer.MIN_VALUE;
                    for (int dj1 = -1; dj1 <= 1; dj1++) {
                        for (int dj2 = -1; dj2 <= 1; dj2++) {
                            int nj1 = j1 + dj1, nj2 = j2 + dj2;
                            if (nj1 >= 0 && nj1 < m && nj2 >= 0 && nj2 < m) {
                                int val = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                                val += front[nj1][nj2];
                                maxi = Math.max(maxi, val);
                            }
                        }
                    }
                    curr[j1][j2] = maxi;
                }
            }
            int[][] temp = front;
            front = curr;
            curr = temp;
        }
        return front[0][m - 1];
    }
}
