// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public String shortestCommonSupersequence(String str1, String str2) {
        int n = str1.length();
        int m = str2.length();
        dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = -1;
            }
        }
        helper(str1, str2, n - 1, m - 1);
        return build(str1, str2, n - 1, m - 1);
    }
    private int helper(String s1, String s2, int i, int j) {
        if (i < 0 || j < 0) return 0;
        if (dp[i][j] != -1) return dp[i][j];
        if (s1.charAt(i) == s2.charAt(j)) {
            return dp[i][j] = 1 + helper(s1, s2, i - 1, j - 1);
        }
        return dp[i][j] = Math.max(helper(s1, s2, i - 1, j), helper(s1, s2, i, j - 1));
    }
    private String build(String s1, String s2, int i, int j) {
        StringBuilder res = new StringBuilder();
        while (i >= 0 && j >= 0) {
            if (s1.charAt(i) == s2.charAt(j)) {
                res.insert(0, s1.charAt(i));
                i--;
                j--;
            } else if (i > 0 && dp[i - 1][j] >= (j > 0 ? dp[i][j - 1] : 0)) {
                res.insert(0, s1.charAt(i));
                i--;
            } else {
                res.insert(0, s2.charAt(j));
                j--;
            }
        }
        while (i >= 0) {
            res.insert(0, s1.charAt(i));
            i--;
        }
        while (j >= 0) {
            res.insert(0, s2.charAt(j));
            j--;
        }
        return res.toString();
    }
}

// TABULATION
class Solution {
    static int dp[][];
    public String shortestCommonSupersequence(String str1, String str2) {
        int n = str1.length();
        int m = str2.length();
        dp = new int[n+1][m+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                dp[i][j] = -1;
            }
        }
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int j=0;j<=m;j++){
            dp[0][j] = 0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str1.charAt(i-1) == str2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        int i = n;
        int j = m;
        StringBuilder str = new StringBuilder();
        while(i>0 && j>0){
            if(str1.charAt(i-1) == str2.charAt(j-1)){
                str.insert(0, str1.charAt(i-1));
                i--;
                j--;
            }else if(dp[i-1][j]>dp[i][j-1]){
                str.insert(0, str1.charAt(i-1));
                i--;
            }else{
                str.insert(0, str2.charAt(j-1));
                j--;
            }
        }
        while(i>0){
            str.insert(0, str1.charAt(i-1));
            i--;
        }
        while(j>0){
            str.insert(0, str2.charAt(j-1));
            j--;
        }
        return str.toString();
    }
}
