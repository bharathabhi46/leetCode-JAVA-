// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public int change(int amount, int[] coins) {
        int n = coins.length;
        dp = new int[n][amount+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=amount;j++){
                dp[i][j] = -1;
            }
        }
        return solve(n-1, amount, coins);
    }
    static int solve(int i, int amt, int[] coins){
        if(i==0){
            if(amt % coins[0] == 0) return 1;
            return 0;
        }
        if(dp[i][amt] != -1) return dp[i][amt];
        int notTake = solve(i-1, amt, coins);
        int take = 0;
        if(coins[i] <= amt) take = solve(i, amt - coins[i], coins);
        return dp[i][amt] = notTake + take;
    }
}

// TABULATION
class Solution {
    static int dp[][];
    public int count(int coins[], int sum) {
         int n = coins.length;
        int k = sum;
        dp = new int[n][k+1];
        for(int i=0;i<=k;i++){
            if(i%coins[0]==0){
                dp[0][i] = 1;
            }else{
                dp[0][i] = 0;
            }
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=k;j++){
                int nT = dp[i-1][j];
                int T = 0;
                if(coins[i]<=j){
                    T = dp[i][j-coins[i]];
                }
                dp[i][j] = nT+T;
            }
        }
        return dp[n-1][k];
    }
}
