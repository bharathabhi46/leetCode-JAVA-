// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public int bS(int prices[], int i, int f){
        if(i == prices.length){
            return 0;
        }
        int profit = 0;
        if(dp[i][f]!=-1){
            return dp[i][f];
        }
        if(f == 1){ 
            return dp[i][f] = Math.max(-prices[i] + bS(prices, i+1, 0), 0+bS(prices, i+1, 1));
        }else{
           return dp[i][f] = Math.max(prices[i] + bS(prices, i+1, 1), 0+bS(prices, i+1, 0));   
        }
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        dp = new int[n][2];
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                dp[i][j] = -1;
            }
        }
        return bS(prices, 0, 1);
    }
}
// TABULATION
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n+1][2];
        for(int i=n-1;i>=0;i--){
            for(int f=0;f<2;f++){
                if(f == 1){
                    dp[i][f] = Math.max(-prices[i] + dp[i+1][0], dp[i+1][1]);
                }else{
                    dp[i][f] = Math.max(prices[i] + dp[i+1][1], dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
    }
}
