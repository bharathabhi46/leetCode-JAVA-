// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    static int ans = Integer.MIN_VALUE;
    public int lcs(int[] nums1, int[] nums, int n, int m){
        if(n<0 || m<0){
            return 0;
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(nums1[n] == nums[m]){
            dp[n][m] = 1 + lcs(nums1, nums, n-1, m-1);
            ans = Math.max(ans, dp[n][m]);
        }
        else{
            dp[n][m] = 0;
        }
        lcs(nums1, nums, n-1, m);
        lcs(nums1, nums, n, m-1);
        return dp[n][m];
    }
    public int findLength(int[] nums1, int[] nums2) {
        ans = Integer.MIN_VALUE;
        int n = nums1.length;
        int m = nums2.length;
        dp = new int[n+1][m+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                dp[i][j] = -1;
            }
        }
        lcs(nums1, nums2, n-1, m-1);
        if(ans == Integer.MIN_VALUE) return 0;
        return ans;
    }
}
// TABULATION
