// RECURSION + MEMOIZATION
class Solution {
    int[][] dp;
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        dp = new int[n][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(0, 0, triangle, n);
    }
    private int f(int i, int j, List<List<Integer>> triangle, int n) {
        if (i == n - 1) return triangle.get(i).get(j);
        if (dp[i][j] != -1) return dp[i][j];
        int d = triangle.get(i).get(j) + f(i + 1, j, triangle, n);
        int dg = triangle.get(i).get(j) + f(i + 1, j + 1, triangle, n);
        return dp[i][j] = Math.min(d, dg);
    }
}

// TABULATION
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int dp[][] = new int[n][n];
        for(int j=0;j<n;j++){
            dp[n-1][j] = triangle.get(n-1).get(j);
        }
        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int d = triangle.get(i).get(j) + dp[i+1][j];
                int dg = triangle.get(i).get(j) + dp[i+1][j+1];
                dp[i][j] = Math.min(d, dg);
            }
        }
        return dp[0][0];
    }
}
// SPACE OPTIMIZATION
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[] front = new int[n];
        for (int j = 0; j < n; j++) {
            front[j] = triangle.get(n - 1).get(j);
        }
        for (int i = n - 2; i >= 0; i--) {
            int[] curr = new int[n];
            for (int j = i; j >= 0; j--) {
                int d = triangle.get(i).get(j) + front[j];
                int dg = triangle.get(i).get(j) + front[j + 1];
                curr[j] = Math.min(d, dg);
            }
            front = curr;
        }
        return front[0];
    }
}
