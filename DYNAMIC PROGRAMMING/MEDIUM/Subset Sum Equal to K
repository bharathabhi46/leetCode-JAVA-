// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public static boolean f(int i, int target, int arr[]) {
        if (target == 0) return true;
        if (i == 0) return arr[0] == target;
        if (dp[i][target] != -1) return dp[i][target] == 1;
        boolean notTake = f(i - 1, target, arr);
        boolean take = false;
        if (arr[i] <= target) take = f(i - 1, target - arr[i], arr);
        dp[i][target] = (take || notTake) ? 1 : 0;
        return dp[i][target] == 1;
    }
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        dp = new int[n][k + 1];
        for (int i = 0; i < n; i++) for (int j = 0; j <= k; j++) dp[i][j] = -1;
        return f(n - 1, k, arr);
    }
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4};
        int k = 5;
        System.out.println(subsetSumToK(arr.length, k, arr));
    }
}
// TABULATION
class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        boolean dp[][] = new boolean[n][k + 1];
        for (int i = 0; i < n; i++) dp[i][0] = true;
        if (arr[0] <= k) dp[0][arr[0]] = true;
        for (int i = 1; i < n; i++) {
            for (int target = 1; target <= k; target++) {
                boolean notTake = dp[i - 1][target];
                boolean take = false;
                if (arr[i] <= target) take = dp[i - 1][target - arr[i]];
                dp[i][target] = take || notTake;
            }
        }
        return dp[n - 1][k];
    }
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4};
        int k = 5;
        System.out.println(subsetSumToK(arr.length, k, arr));
    }
}
// SPACE OPTIMIZATION
class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        boolean prev[] = new boolean[k + 1];
        prev[0] = true;
        if (arr[0] <= k) prev[arr[0]] = true;
        for (int i = 1; i < n; i++) {
            boolean cur[] = new boolean[k + 1];
            cur[0] = true;
            for (int target = 1; target <= k; target++) {
                boolean notTake = prev[target];
                boolean take = false;
                if (arr[i] <= target) take = prev[target - arr[i]];
                cur[target] = take || notTake;
            }
            prev = cur;
        }
        return prev[k];
    }
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4};
        int k = 5;
        System.out.println(subsetSumToK(arr.length, k, arr));
    }
}

