// RECUSION + MEMOIZATION
class Solution {
    int dp[][];
    public int solveSum(int grid[][], int i, int j){
        if(i>=grid.length || j>=grid[0].length){
            return Integer.MAX_VALUE;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(i==grid.length-1 && j==grid[0].length-1){
            return grid[i][j];
        }
        int right = solveSum(grid, i, j+1);
        int down = solveSum(grid, i+1, j);
        dp[i][j] = grid[i][j] + Math.min(right, down);
        return dp[i][j];
    }
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m =  grid[0].length;
        dp = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j]=-1;
            }
        }
        return solveSum(grid,0,0);     
    }
}
