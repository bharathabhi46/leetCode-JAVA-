// TABULATION
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[][] dp = new int[n][m];
        for(int j=0;j<m;j++){
            dp[0][j] = matrix[0][j];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                int u = matrix[i][j] + dp[i-1][j];
                int ld = Integer.MAX_VALUE;
                if(j-1>=0){
                    ld = matrix[i][j] + dp[i-1][j-1];
                }
                int rd = Integer.MAX_VALUE;
                if(j+1<m){
                    rd = matrix[i][j] + dp[i-1][j+1];
                }
                dp[i][j] = Math.min(u, Math.min(ld, rd));
            }
        }
        int maxi = dp[n-1][0];
        for(int j=1;j<m;j++){
            maxi = Math.min(maxi, dp[n-1][j]);
        }
        return maxi;
    }
}
// RECURSION + MEMOIZATION
class Solution {
    static int dp[][];
    public int minPath(int arr[][], int i, int j){
        if(i<0 || j<0 || j>=arr[0].length){
            return Integer.MAX_VALUE;
        }
        if(i==0){
            return arr[i][j];
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int u =  minPath(arr, i-1, j);
        int ld =  minPath(arr, i-1, j-1);
        int rd =  minPath(arr, i-1, j+1);
        dp[i][j] = arr[i][j] + Math.min(u, Math.min(ld, rd));
        return dp[i][j];
    }
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        dp = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j] = -1;
            }
        }
        int re = Integer.MAX_VALUE;
        for(int j=0;j<m;j++){
            re = Math.min(re, minPath(matrix, n-1, j));
        }
        return re;
    }
}
// SPACE OPTIMIZATION
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        
        int[] prev = new int[m];
        int[] curr = new int[m];

        for (int j = 0; j < m; j++) {
            prev[j] = matrix[0][j];
        }
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int u = prev[j];
                int ld = (j > 0) ? prev[j-1] : Integer.MAX_VALUE;
                int rd = (j < m-1) ? prev[j+1] : Integer.MAX_VALUE;
                
                curr[j] = matrix[i][j] + Math.min(u, Math.min(ld, rd));
            }
            prev = curr.clone();
        }
      
        int minVal = Integer.MAX_VALUE;
        for (int j = 0; j < m; j++) {
            minVal = Math.min(minVal, prev[j]);
        }
        
        return minVal;
    }
}
