// RECURSION + MEMOIZATION
// User function Template for Java

class Solution {
    static int dp[][];
    public int helper(String s1, String s2, int i, int j){
        if(i<0 || j<0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        if(s1.charAt(i) == s2.charAt(j)){
            return dp[i][j] = 1 + helper(s1, s2, i-1, j-1);
        }
        return dp[i][j] = Math.max(helper(s1, s2, i-1, j), helper(s1, s2, i, j-1));
    }
    public int minOperations(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        dp = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j] = -1;
            }
        }
        return n+m - 2*helper(s1, s2, n-1, m-1);
    }
}
// TABULATION
class Solution {
    public int minOperations(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        int dp[][] = new int[n+1][m+1];
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return n+m - 2*dp[n][m];
    }
}
