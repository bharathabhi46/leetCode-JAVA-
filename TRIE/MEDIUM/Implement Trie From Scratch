class Trie {
    Node root;
    public class Node{
       Node[] children;
        boolean eow;

        public Node() {
            children = new Node[26];
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
            eow = false; 
        }
    }
    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) {
        Node cur = root;
        for(int i=0;i<word.length();i++){
            int ind = word.charAt(i)- 'a';
            if(cur.children[ind]==null){
                cur.children[ind] = new Node();
            }
            if(i==word.length()-1){
                cur.children[ind].eow = true;
            }
            cur = cur.children[ind];
        }
    }
    
    public boolean search(String word) {
        Node cur = root;
        for(int i=0;i<word.length();i++){
            int ind = word.charAt(i) - 'a';
            Node node = cur.children[ind];
            if(node==null){
                return false;
            }
            if(i==word.length()-1 && cur.children[ind].eow == false){
                return false;
            }
            cur = cur.children[ind];
        }
        return true;
    }
    
    public boolean startsWith(String prefix) {
        Node cur = root;
        for(int i=0;i<prefix.length();i++){
            int ind = prefix.charAt(i) - 'a';
            Node node = cur.children[ind];
            if(node == null){
                return false;
            }
            cur = cur.children[ind];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
