class Solution {
    public class Edge{
        int dt;
        public Edge(int d){
            this.dt = d;
        }
    }
    public void createGraph(ArrayList<Edge> g[], int[][] graph){
        for(int i=0;i<g.length;i++){
            g[i] = new ArrayList<Edge>();
        }
        for(int i=0;i<graph.length;i++){
            for(int j=0;j<graph[i].length;j++){
                int dest = graph[i][j];
                g[i].add(new Edge(dest));
            }
        }
    }
    public void allPaths(ArrayList<Edge> g[], List<Integer> l, List<List<Integer>> re, boolean vis[], int cur, int t){
        if(cur == t){
            l.add(cur);
            re.add(new ArrayList<>(l));
            l.remove(l.size() - 1);
            return;
        }
        for(int i=0;i<g[cur].size();i++){
            Edge e = g[cur].get(i);
            if(vis[e.dt] == false){
                l.add(cur);
                vis[cur] = true;
                allPaths(g, l, re, vis, e.dt, t);
                vis[cur] = false;
                l.remove(l.size()-1);
            }
        }
    }
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        int n = graph.length;
        int t = n-1;
        ArrayList<Edge> g[] = new ArrayList[n];
        createGraph(g, graph);
        List<List<Integer>> re = new ArrayList<>();
        List<Integer> l = new ArrayList<>();
        boolean vis[] = new boolean[n];
        allPaths(g, l, re, vis, 0, t);
        return re;
    }
}
