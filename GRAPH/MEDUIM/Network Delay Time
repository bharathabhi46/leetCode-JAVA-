class Solution {
    public class Edge{
        int dt;
        int wt;
        public Edge(int d, int w){
            this.dt = d;
            this.wt = w;
        }
    }
    public void createGraph(ArrayList<Edge> graph[], int a[][], int V){
        for(int i=0;i<V;i++){
            graph[i] = new ArrayList<Edge>();
        }
        for(int i=0;i<a.length;i++){
            int s = a[i][0] - 1;
            int d = a[i][1] - 1;
            int w = a[i][2];
            graph[s].add(new Edge(d, w));
        }
    }
    public class Pair implements Comparable<Pair>{
        int node;
        int dist;
        public Pair(int n, int d){
            this.node = n;
            this.dist = d;
        }
        @Override
        public int compareTo(Pair p2){
            return this.dist - p2.dist;
        }
    }
    public int dijkstra(ArrayList<Edge> graph[], int k, int V){
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        int dest[] = new int[V];
        for(int i=0;i<V;i++){
            if(i!=k){
                dest[i] = Integer.MAX_VALUE;
            }
        }
        boolean vis[] = new boolean[V];
        pq.add(new Pair(k,0));
            while(!pq.isEmpty()){
            Pair cur = pq.remove();
            if(!vis[cur.node]){
                vis[cur.node] = true;
                for(int i=0;i<graph[cur.node].size();i++){
                    Edge e = graph[cur.node].get(i);
                    int v = e.dt;
                    int w = e.wt;
                    if(dest[cur.node]+w<dest[v]){
                        dest[v] = dest[cur.node]+w;
                        pq.add(new Pair(v, dest[v]));
                    }
                }
            }
        }
        int m = 0;
        for(int i=0;i<V;i++){
            if(dest[i] == Integer.MAX_VALUE) return -1;
            m = Math.max(m, dest[i]);
        }
        return m;
    }
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<Edge> graph[] = new ArrayList[n];
        createGraph(graph, times, n);
        return dijkstra(graph, k - 1, n);
    }
}
