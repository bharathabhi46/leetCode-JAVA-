class Solution {
    public void f(int[] arr, int n, int k, List<List<Integer>> re, List<Integer> l, int ind){
        if(k==0){
            if(!re.contains(l)){
            re.add(new ArrayList<>(l));
            }
            return;
        }
        if(ind == n || k<0){
            return;
        }
// USING LOOP < TWO RECURSIVE CALLS REDUCE SOME ITERATIONS AND EASY TO CHECK THE DUPLICATES
        for (int i = ind; i < n; i++) {
(I>IND) - > IT ADD THE DUPLCATE ELEMENTS BUT DONT NOT INCLUDE AGAIN THESE ELEMETN IN ANOTHER LIST
            if (i > ind && arr[i] == arr[i - 1]) continue;
            if (arr[i] > k) break;
            l.add(arr[i]);
            f(arr, n, k - arr[i], re, l, i + 1); 
            l.remove(l.size() - 1); 
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        int n = candidates.length;
        Arrays.sort(candidates);
        List<List<Integer>> re = new ArrayList<>();
        List<Integer> l = new ArrayList<>();
        f(candidates, n, target, re, l, 0);
        return re;
    }
}
