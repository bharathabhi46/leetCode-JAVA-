class MyCircularQueue {
final int a[];
int size = 0;
int rear = -1;
int front = -1;
    public MyCircularQueue(int k) {
        a = new int[k];
    }
    
    public boolean enQueue(int value) {
        if(!isFull()){
            if(front == - 1){
                front = 0;
            }
            rear = (rear+1)%a.length;
            a[rear] = value;
            size++;
            return true;
        }else{
            return false;
        }
    }
    
    public boolean deQueue() {
        if(!isEmpty()){
            if(front==rear){
                front = -1;
                rear = -1;
            }else{
            front = (front + 1) % a.length;
            }
            size--;
            return true;
        }else{
            return false;
        }
    }
    
    public int Front() {
        if(isEmpty()){
            return -1;
        }else{
            return a[front];
        }
    }
    
    public int Rear() {
        if(isEmpty()){
            return -1;
        }else{
            return a[rear];
        }
    }
    
    public boolean isEmpty() {
        return rear == -1 && front == -1;
    }
    
    public boolean isFull() {
        return (rear+1)%a.length==front;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
